% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/server.R
\name{overlayServer}
\alias{overlayServer}
\title{Add interactive overlays to a Shiny plot}
\usage{
overlayServer(
  outputId,
  nrect,
  width = NULL,
  colours = overlayColours,
  opacity = 0.25,
  icon = shiny::icon("gear"),
  stagger = 0.045,
  debug = FALSE
)
}
\arguments{
\item{outputId}{The ID of the plot output (as used in \code{\link[=overlayPlotOutput]{overlayPlotOutput()}}).}

\item{nrect}{Number of overlay rectangles to support.}

\item{width}{Optional default overlay width in plot coordinates. If \code{NULL},
defaults to 10\% of the coordinate width.}

\item{colours}{A function to assign custom colours to the overlays. Should
be a function that takes a single integer (the number of overlays) and
returns colours in hexadecimal notation, or any notation supported by
CSS (e.g. "#FF0000", "red").}

\item{opacity}{Numeric value (0 to 1) indicating overlay transparency.}

\item{icon}{A Shiny icon to show the dropdown menu.}

\item{stagger}{Vertical offset between stacked overlays, as a proportion of
height.}

\item{debug}{If \code{TRUE}, prints changes to input values to the console for
debugging purposes.}
}
\value{
A \code{\link[shiny:reactiveValues]{shiny::reactiveValues()}} object with the following named fields:
\describe{
\item{n}{Number of overlays.}
\item{active}{Logical vector of length \code{n}; indicates which overlays are active.}
\item{show}{Logical; controls whether overlays are visible.}
\item{editing}{Index of the overlay currently being edited via the
dropdown menu (if any; \code{NA} otherwise).}
\item{last}{Index of the most recently added overlay.}
\item{px, pw}{Overlay x-position and width in pixels.}
\item{py, ph}{Overlay y-position and height in pixels.}
\item{cx0, cx1}{Overlay x-bounds in plot coordinates.}
\item{label}{Character vector of labels shown at the top of each overlay.}
\item{outputId}{The output ID of the plot display area.}
\item{bound_cx, bound_cw}{x-position and width of the bounding area in plot coordinates.}
\item{bound_px, bound_pw}{x-position and width of the bounding area in pixels.}
\item{stagger}{Amount of vertical staggering (as proportion of height).}
\item{update_cx(i)}{Function to update \code{cx0}/\code{cx1} from \code{px}/\code{pw} for overlay \code{i}.}
\item{update_px()}{Function to update \code{px}/\code{pw} from \code{cx0}/\code{cx1} for all overlays.}
}
}
\description{
This function sets up server-side infrastructure to support draggable and
resizable overlays on a plot. This may be useful in applications where users
need to define ranges, regions of interest, or intervals for further input
or processing. Currently, the overlays are only designed to move along the
x axis of the plot.
}
\details{
Call this function once from your server code to initialise a set of overlay
rectangles for a specific plot. It creates reactive handlers for move,
resize, and dropdown menu actions, and allows adding new overlays by
dragging an \code{\link[=overlayToken]{overlayToken()}} onto the plot.

This function also defines a dynamic output UI slot with ID
\code{paste0(outputId, "_menu")}, which can be rendered using \code{\link[shiny:renderUI]{shiny::renderUI()}}.
When a user clicks the overlay's dropdown icon, this menu becomes visible
and can be populated with inputs for editing overlay-specific settings, e.g.
labels or numeric parameters tied to that overlay.
}
\examples{
\dontrun{
server <- function(input, output) {
    ov <- overlayServer("my_plot", 4)
    ov$label <- LETTERS[1:4]

    output$my_plot_menu <- renderUI({
        i <- req(ov$editing)
        textInput("label_input", "Overlay label", value = ov$label[i])
    })

    observeEvent(input$label_input, {
        i <- req(ov$editing)
        ov$label[i] <- input$label_input
    })
}
}

}
\seealso{
\code{\link[=overlayPlotOutput]{overlayPlotOutput()}}, \code{\link[=overlayBounds]{overlayBounds()}}
}
