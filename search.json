[{"path":"https://nicholasdavies.github.io/overshiny/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 overshiny authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nick Davies. Author, maintainer, copyright holder.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davies N (2025). overshiny: Interactive Overlays 'shiny' Plots. R package version 0.1.0, https://github.com/nicholasdavies/overshiny.","code":"@Manual{,   title = {overshiny: Interactive Overlays on 'shiny' Plots},   author = {Nick Davies},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/nicholasdavies/overshiny}, }"},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"overshiny-interactive-overlays-on-shiny-plots","dir":"","previous_headings":"","what":"Interactive Overlays on shiny Plots","title":"Interactive Overlays on shiny Plots","text":"overshiny provides draggable resizable rectangular elements overlay plots Shiny apps. may useful applications users need define regions plot input processing. Currently, overlays designed move along x axis plot.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Interactive Overlays on shiny Plots","text":"overshiny active development. missing features. Missing features: Doesn’t handle window resizing plot resizing well. simple functionality add new overlay (without using draggable overlay token)","code":""},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interactive Overlays on shiny Plots","text":"can install development version overshiny GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nicholasdavies/overshiny\")"},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Interactive Overlays on shiny Plots","text":"example shows basic functionality overshiny:","code":"library(shiny) library(ggplot2) library(overshiny)  # --- User interface --- ui <- fluidPage(     # Load overshiny     useOverlay(),      # Lighten the sidebar background     tags$head(tags$style(\".well { background-color: white }\")),      titlePanel(\"Overlay demo\"),      sidebarLayout(         sidebarPanel(             # Control whether overlays are displayed and whether they alter the plot             checkboxInput(\"show_overlays\", \"Show overlays\", value = TRUE),             checkboxInput(\"enable_logic\", \"Enable overlay logic\", value = TRUE),             tags$hr(),              # Select date range for the plot             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             tags$hr(),              # Overlay controls: tokens that can be dragged onto the plot             h5(\"Drag tokens below onto the plot:\"),             overlayToken(\"grow\", \"Grow\"),             overlayToken(\"shrink\", \"Shrink\")         ),          mainPanel(             # Main plot with support for overlays             overlayPlotOutput(\"plot\", width = \"100%\", height = 300)         )     ) )  # --- App logic --- server <- function(input, output, session) {     # --- OVERLAY SETUP ---      # Initialise 8 draggable/resizable overlays     ov <- overlayServer(\"plot\", 8, width = 56) # 56 days = 8 weeks default width      # Reactive values to store custom per-overlay settings     opt <- reactiveValues(         type = rep(\"Grow\", 8),        # type of overlay action         strength = rep(50, 8)         # strength as a percentage     )      # Toggle overlay visibility based on checkbox     observe({         ov$show <- isTRUE(input$show_overlays)     })      # --- OVERLAY DROPDOWN MENU ---      # Render dropdown menu when an overlay is being edited     output$plot_menu <- renderUI({         i <- req(ov$editing)  # Current overlay being edited         tagList(             textOutput(\"dates\"),             selectInput(\"type\", NULL, choices = c(\"Grow\", \"Shrink\"), selected = ov$label[i]),             sliderInput(\"strength\", \"Strength\", min = 0, max = 100, value = opt$strength[i])         )     })      # Display date range for the currently edited overlay     output$dates <- renderText({         i <- req(ov$editing)         fmt <- function(t) format(as.Date(round(t), origin = \"1970-01-01\"), \"%b %d\")         paste(fmt(ov$cx0[i]), \"–\", fmt(ov$cx1[i]))     })      # Update stored strength when the slider changes     observeEvent(input$strength, {         i <- req(ov$editing)         opt$strength[i] <- input$strength     })      # Update stored type and overlay label when dropdown changes     observeEvent(input$type, {         i <- req(ov$editing)         opt$type[i] <- input$type         ov$label[i] <- input$type     })      # --- DATA PROCESSING BASED ON OVERLAY POSITION ---      # Reactive dataset: oscillating signal modified by active overlays     data <- reactive({         date_seq <- seq(input$date_range[1], input$date_range[2], by = \"1 day\")         y <- 1 + 0.5 * sin(as.numeric(date_seq) / 58)  # oscillating signal          # Modify signal according to active overlays if logic is enabled         if (isTRUE(input$enable_logic)) {             for (i in which(ov$active)) {                 start <- as.Date(round(ov$cx0[i]), origin = \"1970-01-01\")                 end <- as.Date(round(ov$cx1[i]), origin = \"1970-01-01\")                 in_range <- date_seq >= start & date_seq <= end                 factor <- opt$strength[i] / 100                 y[in_range] <- y[in_range] * if (ov$label[i] == \"Grow\") (1 + factor) else (1 - factor)             }         }          data.frame(date = date_seq, y = y)     })      # --- RENDERING OF DATA ---      # Render plot and align overlays to current axis limits     output$plot <- renderPlot({         plot <- ggplot(data()) +             geom_line(aes(x = date, y = y)) +             ylim(0, 3) +             labs(x = NULL, y = \"Signal\")          overlayBounds(ov, plot,             xlim = c(input$date_range),             ylim = c(0, NA))     }) }  # --- Run app --- shinyApp(ui, server)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Align overlays with a ggplot2 or base plot — overlayBounds","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"Sets pixel coordinate bounds overlay area based ggplot2::ggplot() object base R plot. ensures overlays positioned correctly visual coordinate space.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"","code":"overlayBounds(ov, plot, xlim = c(NA, NA), ylim = c(NA, NA), row = 1L, col = 1L)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"ov shiny::reactiveValues() object returned overlayServer(). plot ggplot2::ggplot() object used overlay alignment, character string \"base\" using base R plotting. xlim, ylim Vectors defining coordinate limits overlays. Use NA inherit axis limits plot panel. row, col Row column facet panel (applicable). works ggplot2 plots; base R plots multiple panels supported.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"ggplot object (ggplot2) NULL (base R plotting), returned shiny::renderPlot() block.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"Call function within shiny::renderPlot(), returning ggplot object (using ggplot2) NULL (using base R plotting).","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"","code":"server <- function(input, output) {     ov <- overlayServer(\"my_plot\", 1, 1)     output$my_plot <- shiny::renderPlot({         plot(1:100, sin(1:100 * 0.1), type = \"l\")         overlayBounds(ov, \"base\", xlim = c(1, 100))     })     # further server code here . . . }"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plot output element with overlays — overlayPlotOutput","title":"Create a plot output element with overlays — overlayPlotOutput","text":"Render shiny::renderPlot() within application page, support overlays.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plot output element with overlays — overlayPlotOutput","text":"","code":"overlayPlotOutput(outputId, width, height)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plot output element with overlays — overlayPlotOutput","text":"outputId output slot plot rendered using shiny::renderPlot(), call overlayBounds(). width, height Image width height. Must valid CSS unit, like \"100%\", \"400px\", \"auto\", number, interpreted pixels.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plot output element with overlays — overlayPlotOutput","text":"plot output element can added UI definition.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plot output element with overlays — overlayPlotOutput","text":"","code":"ui <- shiny::fluidPage(     useOverlay(),     overlayPlotOutput(\"my_plot\", 640, 480)     # further UI elements here . . . )"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add interactive overlays to a Shiny plot — overlayServer","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"function sets server-side infrastructure support draggable resizable overlays plot. may useful applications users need define regions plot input processing. Currently, overlays designed move along x axis plot.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"","code":"overlayServer(   outputId,   nrect,   width = NULL,   snap = \"none\",   colours = overlayColours,   opacity = 0.25,   icon = shiny::icon(\"gear\"),   stagger = 0.045,   style = list(),   debug = FALSE )"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"outputId ID plot output (used overlayPlotOutput()). nrect Number overlay rectangles support. width Optional default overlay width plot coordinates. NULL (default), set 10% plot width. snap Function \"snap\" overlay coordinates grid, \"none\" (default) snapping. See details specify snap function. colours function assign custom colours overlays. function takes single integer (number overlays) returns colours hexadecimal notation (e.g. \"#FF0000\"). provide opacity fourth channel; use opacity argument instead. opacity Numeric value (0 1) indicating overlay transparency. icon Shiny icon show dropdown menu. stagger Vertical offset stacked overlays, proportion height. style Named list character vectors additional CSS styling attributes overlays. element named \"background-color\" override colours opacity arguments. Vectors recycled length nrect. debug TRUE, prints changes input values console debugging purposes.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"shiny::reactiveValues() object following named fields: n Number overlays (read-). active Logical vector length n; indicates overlays active. show Logical vector; controls whether overlays visible. editing Index overlay currently edited via dropdown menu, ; NA otherwise (read-). last Index recently added overlay (read-). snap Coordinate snapping function. px, pw Numeric vector; overlay x-position width pixels (see note). py, ph Numeric vector; overlay y-position height pixels (read-). cx0, cx1 Numeric vector; overlay x-bounds plot coordinates (see note). label Character vector labels shown top overlay. outputId output ID plot display area (read-). bound_cx, bound_cw x-position width bounding area plot coordinates (read-). bound_px, bound_pw x-position width bounding area pixels (read-). bound_py, bound_ph y-position height bounding area pixels (read-). stagger Amount vertical staggering, proportion height. style Named list character vectors; additional styling rectangular overlays. update_cx() Function update cx0/cx1 px/pw overlays (see note). update_px() Function update px/pw cx0/cx1 overlays (see note). Note: Fields marked \"read-\" changed. fields can changed reactive code modify overlays properties. fields px pw specify pixel coordinates overlay can modified, modifications placed shiny::isolate() call, call ov$update_cx() end update cx0 cx1 apply snapping. Similarly, fields cx0 cx1 specify plot coordinates overlay can modified, modifications placed shiny::isolate() call call ov$update_px() end update px pw apply snapping. parameter functions can left apply changes overlays, can pass indices just overlay(s) updated.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"Call function server code initialise set overlay rectangles specific plot. creates reactive handlers move, resize, dropdown menu actions, allows adding new overlays dragging overlayToken() onto plot. function returns shiny::reactiveValues() object keep use; examples documentation, object typically called ov. function also defines dynamic output UI slot ID paste0(outputId, \"_menu\"), can rendered using shiny::renderUI(). user clicks overlay's dropdown icon, menu becomes visible can populated inputs editing overlay-specific settings, e.g. labels numeric parameters tied overlay. provide coordinate snapping function (snap argument), signature function(ov, ) ov shiny::reactiveValues() object defining overlays settings, set indices rectangles updated. position overlays changed, snapping function applied. function, make sure ov$cx0[] ov$cx1[] within coordinate bounds defined plot, .e. constrained ov$bound_cx ov$bound_cw, function returns. means, example, \"rounding \" ov$cx0[] nearest multiple number, make sure become less ov$bound_cx. Finally, snapping function get triggered x axis range plot changes, may good idea provide one user might place overlay onto plot, change x axis range plot overlay longer visible. can detect verifying whether overlay rectangles \"bounds\" top snapping function. See example .","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"","code":"# Example of a valid snapping function: snap to nearest round number and # make sure the overlay is at least 2 units wide. mysnap <- function(ov, i) {     # remove any \"out of bounds\" overlays     oob <- seq_len(ov$n) %in% i &         (ov$cx0 < ov$bound_cx | ov$cx1 > ov$bound_cx + ov$bound_cw)     ov$active[oob] <- FALSE      # adjust position and with     widths <- pmax(2, round(ov$cx1[i] - ov$cx0[i]))     ov$cx0[i] <- pmax(round(ov$bound_cx),         pmin(round(ov$bound_cx + ov$bound_cw) - widths, round(ov$cx0[i])))     ov$cx1[i] <- pmin(round(ov$bound_cx + ov$bound_cw), ov$cx0[i] + widths) }  ui <- shiny::fluidPage(     useOverlay(),     overlayPlotOutput(\"my_plot\", 640, 480),     overlayToken(\"add\", \"Raise\")     # further UI elements here . . . )  server <- function(input, output) {     ov <- overlayServer(\"my_plot\", 4, 1, snap = mysnap)      output$my_plot_menu <- renderUI({         i <- req(ov$editing)         textInput(\"label_input\", \"Overlay label\", value = ov$label[i])     })      observeEvent(input$label_input, {         i <- req(ov$editing)         ov$label[i] <- input$label_input     })      output$my_plot <- shiny::renderPlot({         df <- data.frame(x = seq(0, 2 * pi, length.out = 200))         df$y <- sin(df$x) + 0.1 * sum(ov$active * (df$x > ov$cx0 & df$x < ov$cx1))         plot(df, type = \"l\")         overlayBounds(ov, \"base\")     })     # further server code here . . . }  if (interactive()) {     shiny::shinyApp(ui, server) }"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an overlay token input control — overlayToken","title":"Create an overlay token input control — overlayToken","text":"Create token can dragged onto (overlay plot)overlayPlotOutput() create new overlay.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an overlay token input control — overlayToken","text":"","code":"overlayToken(inputId, name, label = name)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an overlay token input control — overlayToken","text":"inputId input slot used token. name Text (HTML) displayed token . label Text label appear overlay.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an overlay token input control — overlayToken","text":"overlay token input control can added UI definition.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an overlay token input control — overlayToken","text":"Note DOM ID token converted \"overshiny_token_<inputId>\". transformed ID important internal interaction logic (e.g. use JavaScript drag/drop handlers). referencing token programmatically (e.g. CSS selectors custom JavaScript), use full prefixed ID (see examples).","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an overlay token input control — overlayToken","text":"","code":"ui <- shiny::fluidPage(     useOverlay(),     overlayToken(\"add\", \"Add new overlay\", \"Overlay\"),     # The token's HTML id will be \"overshiny_token_add\"     shiny::tags$style(shiny::HTML(\"#overshiny_token_add { cursor: grab; }\")) )"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overshiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive overlays on Shiny plots — overshiny","title":"Interactive overlays on Shiny plots — overshiny","text":"overshiny provides draggable resizable rectangular elements overlay plots Shiny apps. may useful applications users need define regions plot input processing. Currently, overlays designed move along x axis plot.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overshiny.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interactive overlays on Shiny plots — overshiny","text":"package exports setup helper (useOverlay()), UI components (overlayToken(), overlayPlotOutput()), server-side controller (overlayServer()), function aligning overlays ggplot2 base plot (overlayBounds()).","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overshiny.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interactive overlays on Shiny plots — overshiny","text":"Maintainer: Nick Davies nicholas.davies@lshtm.ac.uk [copyright holder]","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up a Shiny app to use overshiny — useOverlay","title":"Set up a Shiny app to use overshiny — useOverlay","text":"Put useOverlay() Shiny app's UI use overshiny's interactive plot overlays.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up a Shiny app to use overshiny — useOverlay","text":"","code":"useOverlay()"},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up a Shiny app to use overshiny — useOverlay","text":"Returns HTML gets inserted <head> app.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up a Shiny app to use overshiny — useOverlay","text":"can go anywhere UI can inserted multiple times ill effect. also calls shinyjs::useShinyjs(), overshiny depends shinyjs.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up a Shiny app to use overshiny — useOverlay","text":"","code":"ui <- shiny::fluidPage(     useOverlay()     # further UI elements here . . . )  server <- function(input, output) {     # server code here . . . }  if (interactive()) {     shiny::shinyApp(ui, server) }"},{"path":"https://nicholasdavies.github.io/overshiny/news/index.html","id":"overshiny-010","dir":"Changelog","previous_headings":"","what":"overshiny 0.1.0","title":"overshiny 0.1.0","text":"CRAN release: 2025-07-22 Initial CRAN submission.","code":""}]
