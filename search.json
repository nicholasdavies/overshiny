[{"path":"https://nicholasdavies.github.io/overshiny/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 overshiny authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"epidemic-simulation","dir":"Articles","previous_headings":"","what":"Epidemic simulation","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"OK, let’s begin. ’re developing shiny app based around relatively complex simulation code, often helps start putting simulation code together outside context shiny app, later building app include . helps catch errors simulation code putting app, often makes harder catch errors. let’s start infectious disease model epidemics move shiny app later . First, make sure epidemics package installed, recent version overshiny (version CRAN recent enough tutorial!): Now, let’s build simple function produce simulation run epidemics return results. Note I0 initial proportion infectious individuals, pop_size total population size. Test function see can plot prevalence infection (compartment \"infectious\") continuing. ’s might using ggplot2:","code":"devtools::install_github(\"epiverse-trace/epidemics\") devtools::install_github(\"nicholasdavies/overshiny\") library(epidemics)  # Model run function run_model <- function() {     # Build parameters     I0 <- 0.001     pop_size <- 1000000          # Build population     pop <- population(         name = \"Utopia\",         contact_matrix = matrix(1),         demography_vector = 1000000,         initial_conditions = matrix(c(1 - I0, 0, I0, 0, 0), nrow = 1)     )      # Run model     results <- model_default(pop)      return (results) } results <- run_model() results <- results[results$compartment == \"infectious\", ] ggplot(results) +     geom_line(aes(x = time, y = value)) +     labs(x = NULL, y = \"Infection prevalence\")"},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"connecting-to-a-mock-up-of-input","dir":"Articles","previous_headings":"Epidemic simulation","what":"Connecting to a mock-up of input","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"moment, run_model() function produces epidemic curve based default parameters. want run_model() respond user input, though, users app can provide parameters like basic reproduction number R0, infectious period, duration epidemic, . Within shiny, user input provided list called input. let’s say input list contained following: Note , specified lots parameters “natural” units – population size millions, initial proportion infected people percent (proportion), specify infectious period days rather recovery rate days-1. Also, rather specifying total duration epidemic days, specified start date end date epidemic. ’re going develop Shiny app end users mind, may used mathematically tractable units infectious disease modellers use. looking documentation epidemics::population() epidemics::model_default(), can rewrite run_model() function sets relevant parameters according input list ? ’s might : ’ve done , check ’re happy results moving .","code":"input <- list(     # Start and end dates of the epidemic     date_range = as.Date(c(\"2025-01-01\", \"2025-12-31\")),     # Population size in millions     pop_size = 59     # Percentage (not proportion) of the population initially infected     init_infec = 0.1,     # Duration of latent period in days     latent_pd = 2,     # Duration of infectious period in days     infec_pd = 7,     # Basic reproduction number     R0 = 1.3, ) # Model run function run_model <- function(input) {     # Transform parameters     I0 <- input$init_infec / 100; # Percent to proportion     duration <- as.numeric(input$date_range[2] - input$date_range[1]) # Dates to duration     infec_rate <- 1 / input$latent_pd # Latent period to infectiousness rate     recov_rate <- 1 / input$infec_pd  # Infectious period to recovery rate     trans_rate <- input$R0 * recov_rate # R0 to transmission rate (R_0 = beta / gamma)      # Build population     pop <- population(         name = \"Utopia\",         contact_matrix = matrix(1),         demography_vector = input$pop_size * 1000000, # Population size in millions         initial_conditions = matrix(c(1 - I0, 0, I0, 0, 0), nrow = 1)     )      # Run model     results <- model_default(pop, transmission_rate = trans_rate,         infectiousness_rate = infec_rate, recovery_rate = recov_rate,         time_end = duration)      return (results) }"},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"shiny-app-skeleton","dir":"Articles","previous_headings":"","what":"Shiny app skeleton","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"Now, let’s set simulation code aside put together basic shiny app. shiny apps two parts. first part ui User Interface, determines app laid . define components app, , look like. second part server function, processing happens. server transform user inputs outputs, calculations need respond user input. Let’s start really basic skeleton shiny app. can go new .R script file, don’t get rid old code last section ’ll put back later. Put script run . see window pop big title says “SEIRV model interventions”, three smaller titles underneath. Even though basic app, ’s lot unpick . particular, large part script generates user interface lot going . Let’s take step step. shiny, user interface constructed nested function calls. mirrors nested structure web page – e.g. fluidPage contains several elements, may contain several elements. fluidPage just one option top-level element; others include fixedPage basicPage. fluidPage flexible layout can dynamically rearrange elements user using smaller screen like mobile phone, ’s handy use. make use dynamic rearrangement, fluidPage divided rows, defined using function fluidRow, fluidRow divided columns, columns row together width adds 12. chose 12 divides well 1, 2, 3, 4, 6 sections. computer, normally see fluidRow one actual row, looking Shiny app smaller screen, might see fluidRow broken across multiple actual rows. example, shiny ui contains: Arranging part vertically small screen instead horizontally helps ensure content don’t get hard see mobile device ’s squished one row, especially helpful columns contain plots complex elements. , looking whole UI definition: defines fluidPage 12 columns. titlePanel top; anything explicitly fluidRow takes whole row, title panel appears row. fluidRow three columns size 4 (add 12); size column first parameter column elements appear column subsequent arguments. , column contains header h3 text. HTML, h1 h6 define headers sections, h1 biggest h6 smallest. don’t need start h1 work way , often people select header levels (h1 h6) based aesthetics (.e. size looks right) rather strict logical ordering, done . clear, ’s direct relationship header level column size.","code":"library(epidemics) library(shiny)  # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\")         ),          column(4,             # Pathogen settings             h3(\"Pathogen\")         ),          column(4,             # Intervention settings             h3(\"Interventions\")         )     ) )  # --- App logic --- server <- function(input, output) { }  # --- Run app --- shinyApp(ui, server) # --- User interface --- ui <- fluidPage(     ... ) fluidRow(     column(4, \"part one\"),     column(4, \"part two\"),     column(4, \"part three\") ) part one     part two    part three part one part two part three # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\")         ),          column(4,             # Pathogen settings             h3(\"Pathogen\")         ),          column(4,             # Intervention settings             h3(\"Interventions\")         )     ) )"},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"adding-input-widgets","dir":"Articles","previous_headings":"Shiny app skeleton","what":"Adding input widgets","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"Now ’ll edit Shiny app skeleton interesting things going . Take look code expands user interface defined , run whole excerpt: Now ’re getting somewhere! ’ve added input widgets first two columns. shiny gives us, among others, dateRangeInput() put range dates (can use dateInput() just one date); numericInput() enter number using input box (textInput() free text input); sliderInput() enter number using slider. shiny also provides lots functions called xxxInput() follow common conventions: first argument special ID ’ll use later, second argument label show next input, inputs define things like starting value minimum maximum. information, consult shiny manual e.g. ?sliderInput.","code":"library(epidemics) library(shiny)  # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\"),             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             numericInput(\"pop_size\", \"Population size (millions)\", value = 59, min = 1),             sliderInput(\"init_infec\", \"Initial proportion infectious (%)\", value = 0.1, min = 0, max = 1, step = 0.01)         ),          column(4,             # Pathogen settings             h3(\"Pathogen\"),             sliderInput(\"R0\", HTML(\"Basic reproduction number, <i>R<\/i><sub>0<\/sub>\"),                 value = 1.3, min = 0, max = 5, step = 0.05),             sliderInput(\"latent_pd\", \"Latent period (days)\", value = 2, min = 1, max = 7, step = 0.1),             sliderInput(\"infec_pd\", \"Infectious period (days)\", value = 7, min = 1, max = 10, step = 0.1)         ),          column(4,             # Overlay controls: tokens that can be dragged onto the plot             h3(\"Interventions\")         )     ) )  # --- App logic --- server <- function(input, output) { }  # --- Run app --- shinyApp(ui, server)"},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"combining-inputs-and-outputs","dir":"Articles","previous_headings":"","what":"Combining inputs and outputs","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"Now want combine previous run_model() function shiny inputs inputs connect model. Also, want plot results model. Let’s now. First, new file, paste run_model() function calls library need. Nothing new: Underneath , let’s put user interface , one addition: bit added plotOutput call, puts space app plot (either ggplot2 base R plot) ID \"plot\". connect plot inputs, need add code server function, put code underneath already: put together, working model connects user input, epidemic curve changes depending manipulate various input controls. continuing, let’s tidy output little. First , y-axis plot extends millions, numbers like “1e+06” little tough interpret. Try changing plotting code server function output thousands indicated y-axis label. Second, x-axis days 0 duration epidemic, providing shiny app specific dates. Try making x-axis show calendar dates instead number days beginning epidemic. (Hint: can use input list .) ’s might make changes server function just changing call ggplot:","code":"library(shiny) library(ggplot2) library(epidemics)  # Model run function run_model <- function(input) {     # Transform parameters     I0 <- input$init_infec / 100; # Percent to proportion     duration <- as.numeric(input$date_range[2] - input$date_range[1]) # Dates to duration     infec_rate <- 1 / input$latent_pd # Latent period to infectiousness rate     recov_rate <- 1 / input$infec_pd  # Infectious period to recovery rate     trans_rate <- input$R0 * recov_rate # R0 to transmission rate (R_0 = beta / gamma)      # Build population     pop <- population(         name = \"Utopia\",         contact_matrix = matrix(1),         demography_vector = input$pop_size * 1000000, # Population size in millions         initial_conditions = matrix(c(1 - I0, 0, I0, 0, 0), nrow = 1)     )      # Run model     results <- model_default(pop, transmission_rate = trans_rate,         infectiousness_rate = infec_rate, recovery_rate = recov_rate,         time_end = duration)      return (results) } # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),          # NEW PART IS HERE:     # Main plot     plotOutput(\"plot\", width = \"100%\", height = 400),     # END OF NEW PART      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\"),             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             numericInput(\"pop_size\", \"Population size (millions)\", value = 59, min = 1),             sliderInput(\"init_infec\", \"Initial proportion infectious (%)\", value = 0.1, min = 0, max = 1, step = 0.01)         ),          column(4,             # Pathogen settings             h3(\"Pathogen\"),             sliderInput(\"R0\", HTML(\"Basic reproduction number, <i>R<\/i><sub>0<\/sub>\"),                 value = 1.3, min = 0, max = 5, step = 0.05),             sliderInput(\"latent_pd\", \"Latent period (days)\", value = 2, min = 1, max = 7, step = 0.1),             sliderInput(\"infec_pd\", \"Infectious period (days)\", value = 7, min = 1, max = 10, step = 0.1)         ),          column(4,             # Overlay controls: tokens that can be dragged onto the plot             h3(\"Interventions\")         )     ) ) # --- App logic --- server <- function(input, output) {     output$plot <- renderPlot({         results <- run_model(input)         results <- results[results$compartment == \"infectious\", ]         ggplot(results) +             geom_line(aes(x = time, y = value)) +             labs(x = NULL, y = \"Infection prevalence\")     }) }  # --- Run app --- shinyApp(ui, server) ggplot(results) +     geom_line(aes(x = time + input$date_range[1], y = value / 100)) +     labs(x = NULL, y = \"Infection prevalence (thousands)\")"},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"adding-interventions-with-overshiny","dir":"Articles","previous_headings":"","what":"Adding interventions with overshiny","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"last part tutorial, let’s finally connect shiny app overshiny can deploy interventions social distancing vaccination infectious disease transmission model. ’re going get fine details specifically model interventions, just demonsrate overshiny works context model ’ve developed. Starting code developed last section: First, need include overshiny package : Second, need change plotOutput plot UI overlayPlotOutput can respond overlays: Third, need add overlayToken()s can dragged onto plot. Let’s put currently-blank “Interventions” section UI: Fourth, need initialize overlay logic server function putting call overlayServer top server function: finally, need modify call renderPlot() server function tell overshiny information plot. : Now, : two changes . First, rather returning ggplot() plot, save plot variable called plot. Second, pass overlayBounds(), takes four key arguments: ov, object returned overlayServer(). plot, plot . xlim, x-coordinate limits plot. ylim, y-coordinate limits plot. xlim ylim required, ggplot default includes bit extra space around plotted elements (.e. x-axis doesn’t start right epidemic start date, little ), providing allows overshiny restrict overlays can move region epidemic actually running. ’s similar ylim (try removing xlim ylim arguments overlayBounds see happens.) now able drag intervention tokens onto plot, become overlays can move around, resize, remove clicking “gears” icon overlay. won’t anything yet epicurve, though. ’ve gotten stuck, ’s code arrived : ’s overshiny works; rest tutorial just connecting overshiny epidemics overlays plot actually effect epidemic model.","code":"library(shiny) library(ggplot2) library(epidemics)  # Model run function run_model <- function(input) {     # Transform parameters     I0 <- input$init_infec / 100; # Percent to proportion     duration <- as.numeric(input$date_range[2] - input$date_range[1]) # Dates to duration     infec_rate <- 1 / input$latent_pd # Latent period to infectiousness rate     recov_rate <- 1 / input$infec_pd  # Infectious period to recovery rate     trans_rate <- input$R0 * recov_rate # R0 to transmission rate (R_0 = beta / gamma)      # Build population     pop <- population(         name = \"Utopia\",         contact_matrix = matrix(1),         demography_vector = input$pop_size * 1000000, # Population size in millions         initial_conditions = matrix(c(1 - I0, 0, I0, 0, 0), nrow = 1)     )      # Run model     results <- model_default(pop, transmission_rate = trans_rate,         infectiousness_rate = infec_rate, recovery_rate = recov_rate,         time_end = duration)      return (results) }  # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),          # NEW PART IS HERE:     # Main plot     plotOutput(\"plot\", width = \"100%\", height = 400),     # END OF NEW PART      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\"),             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             numericInput(\"pop_size\", \"Population size (millions)\", value = 59, min = 1),             sliderInput(\"init_infec\", \"Initial proportion infectious (%)\", value = 0.1, min = 0, max = 1, step = 0.01)         ),          column(4,             # Pathogen settings             h3(\"Pathogen\"),             sliderInput(\"R0\", HTML(\"Basic reproduction number, <i>R<\/i><sub>0<\/sub>\"),                 value = 1.3, min = 0, max = 5, step = 0.05),             sliderInput(\"latent_pd\", \"Latent period (days)\", value = 2, min = 1, max = 7, step = 0.1),             sliderInput(\"infec_pd\", \"Infectious period (days)\", value = 7, min = 1, max = 10, step = 0.1)         ),          column(4,             # Overlay controls: tokens that can be dragged onto the plot             h3(\"Interventions\")         )     ) )  # --- App logic --- server <- function(input, output) {     output$plot <- renderPlot({         results <- run_model(input)         results <- results[results$compartment == \"infectious\", ]         ggplot(results) +             geom_line(aes(x = time + input$date_range[1], y = value / 100)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")     }) }  # --- Run app --- shinyApp(ui, server) library(overshiny) # Main plot     overlayPlotOutput(\"plot\", width = \"100%\", height = 400), column(4,             # Overlay controls: tokens that can be dragged onto the plot             h3(\"Interventions\"),             overlayToken(\"vax\", \"Vaccination\"),             overlayToken(\"txi\", \"Transmission\")         ) # --- App logic --- server <- function(input, output) {     # --- OVERLAY SETUP ---      # Initialise 8 draggable/resizable overlays     ov <- overlayServer(\"plot\", 8)      # rest of code follows as normal... output$plot <- renderPlot({         results <- run_model(input)         results <- results[results$compartment == \"infectious\", ]         ggplot(results) +             geom_line(aes(x = time + input$date_range[1], y = value / 100)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")     }) output$plot <- renderPlot({         results <- run_model(input)         results <- results[results$compartment == \"infectious\", ]         plot <- ggplot(results) +             geom_line(aes(x = time + input$date_range[1], y = value / 100)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")                  overlayBounds(ov, plot, xlim = c(input$date_range), ylim = c(0, NA))     }) library(shiny) library(ggplot2) library(epidemics) library(overshiny)  # Model run function run_model <- function(input) {     # Transform parameters     I0 <- input$init_infec / 100; # Percent to proportion     duration <- as.numeric(input$date_range[2] - input$date_range[1]) # Dates to duration     infec_rate <- 1 / input$latent_pd # Latent period to infectiousness rate     recov_rate <- 1 / input$infec_pd  # Infectious period to recovery rate     trans_rate <- input$R0 * recov_rate # R0 to transmission rate (R_0 = beta / gamma)      # Build population     pop <- population(         name = \"Utopia\",         contact_matrix = matrix(1),         demography_vector = input$pop_size * 1000000, # Population size in millions         initial_conditions = matrix(c(1 - I0, 0, I0, 0, 0), nrow = 1)     )      # Run model     results <- model_default(pop, transmission_rate = trans_rate,         infectiousness_rate = infec_rate, recovery_rate = recov_rate,         time_end = duration)      return (results) }  # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),          # NEW PART IS HERE:     # Main plot     overlayPlotOutput(\"plot\", width = \"100%\", height = 400),     # END OF NEW PART      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\"),             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             numericInput(\"pop_size\", \"Population size (millions)\", value = 59, min = 1),             sliderInput(\"init_infec\", \"Initial proportion infectious (%)\", value = 0.1, min = 0, max = 1, step = 0.01)         ),          column(4,             # Pathogen settings             h3(\"Pathogen\"),             sliderInput(\"R0\", HTML(\"Basic reproduction number, <i>R<\/i><sub>0<\/sub>\"),                 value = 1.3, min = 0, max = 5, step = 0.05),             sliderInput(\"latent_pd\", \"Latent period (days)\", value = 2, min = 1, max = 7, step = 0.1),             sliderInput(\"infec_pd\", \"Infectious period (days)\", value = 7, min = 1, max = 10, step = 0.1)         ),          column(4,             # Overlay controls: tokens that can be dragged onto the plot             h3(\"Interventions\"),             overlayToken(\"vax\", \"Vaccination\"),             overlayToken(\"txi\", \"Transmission\")         )     ) )  # --- App logic --- server <- function(input, output) {     # --- OVERLAY SETUP ---      # Initialise 8 draggable/resizable overlays     ov <- overlayServer(\"plot\", 8)          # --- RENDERING OF EPI CURVES ---      output$plot <- renderPlot({         results <- run_model(input)         results <- results[results$compartment == \"infectious\", ]         plot <- ggplot(results) +             geom_line(aes(x = time + input$date_range[1], y = value / 100)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")                  overlayBounds(ov, plot, xlim = c(input$date_range), ylim = c(0, NA))     }) }  # --- Run app --- shinyApp(ui, server)"},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"making-the-interventions-work","dir":"Articles","previous_headings":"Adding interventions with overshiny","what":"Making the interventions work","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"last piece puzzle make interventions actually impact plotted. using function model_default() epidemics run model, now use intervention vaccination arguments model_default() make interventions work. First, let’s change run_model() can pass extra parameters epidemics::model_default(). , add ... list parameters pass extra parameters model_default(), like (just two changes make): … … Now, let’s modify call renderPlot reads interventions dragged onto plot fills intervention vaccination parameters accordingly. Compare new call renderPlot() , : lot changed, let’s take step step. First: , create variables hold details interventions apply; tx_int (interventions transmission rate) vax (vaccination campaign). , process overlay data ov object returned overlayServer(): ov$active logical vector, length maximum number overlays (, 8), TRUE overlays plot FALSE overlays aren’t. ((ov$active)) runs loop indices correspond active overlay. read begin end – start time end time intervention – ov$cx0 (starting x-coordinate overlay) ov$cx1 (ending x-coordinate overlay). work many days epidemic begin end subtracting numeric value start date epidemic, .numeric(input$date_range[1]). , overlay label corresponds label overlayToken() created . check whether overlay index \"Vaccination\" \"Transmission\" intervention. vaccination overlays, set vaccination rate nu 0.01, (epidemics) means 1% population getting vaccinated per day. isn’t already vaccination intervention (hence vax NULL) create one. , can’t add second vaccination intervention since epidemics package allows one vaccination intervention; deactivate vaccine intervention one already exists. transmission overlays, set transmission reduction reduc 0.5, means reduction transmission rate 50%. add new intervention list tx_int. epidemics allow multiple transmission-rate interventions, don’t need limit number . Next code, : just turns list transmission interventions tx_int right format epidemics understand, calls function run_model appropriate intervention data vaccination intervention. Put together, working app intervention overlays!","code":"# Model run function run_model <- function(input, ...)  # <-- FIRST CHANGE HERE # Run model     results <- model_default(pop, transmission_rate = trans_rate,         infectiousness_rate = infec_rate, recovery_rate = recov_rate,         time_end = duration, ...) # <-- SECOND CHANGE HERE      return (results) output$plot <- renderPlot({         # Create interventions         tx_int <- list()         vax <- NULL                  # Apply overlays as interventions         for (i in which(ov$active)) {             begin <- ov$cx0[i] - as.numeric(input$date_range[1])             end <- ov$cx1[i] - as.numeric(input$date_range[1])             if (ov$label[i] == \"Vaccination\") {                 nu <- 0.01 # proportion of population vaccinated per day                 if (is.null(vax)) {                     vax <- vaccination(name = as.character(i), nu = matrix(nu),                         time_begin = matrix(begin), time_end = matrix(end))                 } else {                     ov$active[i] <- FALSE                 }             } else if (ov$label[i] == \"Transmission\") {                 reduc <- 0.5 # reduction in transmission                 tx_int[[length(tx_int) + 1]] <- intervention(name = as.character(i),                     type = \"rate\", time_begin = matrix(begin), time_end = matrix(end),                     reduction = reduc)             }         }          # Put interventions in the right format         int <- list()         if (length(tx_int)) {             int[[\"transmission_rate\"]] <- do.call(c, tx_int)         }                  # Run model         results <- run_model(input,             vaccination = vax,             intervention = if (length(int)) int else NULL)                  # Process results (this is the same as before)         results <- results[results$compartment == \"infectious\", ]         plot <- ggplot(results) +             geom_line(aes(x = time + input$date_range[1], y = value / 100)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")                  overlayBounds(ov, plot, xlim = c(input$date_range), ylim = c(0, NA))     }) library(shiny) library(ggplot2) library(epidemics) library(overshiny)  # Model run function run_model <- function(input, ...) {     # Transform parameters     I0 <- input$init_infec / 100; # Percent to proportion     duration <- as.numeric(input$date_range[2] - input$date_range[1]) # Dates to duration     infec_rate <- 1 / input$latent_pd # Latent period to infectiousness rate     recov_rate <- 1 / input$infec_pd  # Infectious period to recovery rate     trans_rate <- input$R0 * recov_rate # R0 to transmission rate (R_0 = beta / gamma)      # Build population     pop <- population(         name = \"Utopia\",         contact_matrix = matrix(1),         demography_vector = input$pop_size * 1000000, # Population size in millions         initial_conditions = matrix(c(1 - I0, 0, I0, 0, 0), nrow = 1)     )      # Run model     results <- model_default(pop, transmission_rate = trans_rate,         infectiousness_rate = infec_rate, recovery_rate = recov_rate,         time_end = duration, ...)      return (results) }  # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),          # NEW PART IS HERE:     # Main plot     overlayPlotOutput(\"plot\", width = \"100%\", height = 400),     # END OF NEW PART      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\"),             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             numericInput(\"pop_size\", \"Population size (millions)\", value = 59, min = 1),             sliderInput(\"init_infec\", \"Initial proportion infectious (%)\", value = 0.1, min = 0, max = 1, step = 0.01)         ),          column(4,             # Pathogen settings             h3(\"Pathogen\"),             sliderInput(\"R0\", HTML(\"Basic reproduction number, <i>R<\/i><sub>0<\/sub>\"),                 value = 1.3, min = 0, max = 5, step = 0.05),             sliderInput(\"latent_pd\", \"Latent period (days)\", value = 2, min = 1, max = 7, step = 0.1),             sliderInput(\"infec_pd\", \"Infectious period (days)\", value = 7, min = 1, max = 10, step = 0.1)         ),          column(4,             # Overlay controls: tokens that can be dragged onto the plot             h3(\"Interventions\"),             overlayToken(\"vax\", \"Vaccination\"),             overlayToken(\"txi\", \"Transmission\")         )     ) )  # --- App logic --- server <- function(input, output) {     # --- OVERLAY SETUP ---      # Initialise 8 draggable/resizable overlays     ov <- overlayServer(\"plot\", 8)          # --- RENDERING OF EPI CURVES ---      output$plot <- renderPlot({         # Create interventions         tx_int <- list()         vax <- NULL                  # Apply overlays as interventions         for (i in which(ov$active)) {             begin <- ov$cx0[i] - as.numeric(input$date_range[1])             end <- ov$cx1[i] - as.numeric(input$date_range[1])             if (ov$label[i] == \"Vaccination\") {                 nu <- 0.01 # proportion of population vaccinated per day                 if (is.null(vax)) {                     vax <- vaccination(name = as.character(i), nu = matrix(nu),                         time_begin = matrix(begin), time_end = matrix(end))                 } else {                     ov$active[i] <- FALSE                 }             } else if (ov$label[i] == \"Transmission\") {                 reduc <- 0.5 # reduction in transmission                 tx_int[[length(tx_int) + 1]] <- intervention(name = as.character(i),                     type = \"rate\", time_begin = matrix(begin), time_end = matrix(end),                     reduction = reduc)             }         }          # Put interventions in the right format         int <- list()         if (length(tx_int)) {             int[[\"transmission_rate\"]] <- do.call(c, tx_int)         }                  # Run model         results <- run_model(input,             vaccination = vax,             intervention = if (length(int)) int else NULL)                  # Process results (this is the same as before)         results <- results[results$compartment == \"infectious\", ]         plot <- ggplot(results) +             geom_line(aes(x = time + input$date_range[1], y = value / 100)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")                  overlayBounds(ov, plot, xlim = c(input$date_range), ylim = c(0, NA))     }) }  # --- Run app --- shinyApp(ui, server) output$plot <- renderPlot({         results <- run_model(input)         results <- results[results$compartment == \"infectious\", ]         plot <- ggplot(results) +             geom_line(aes(x = time + input$date_range[1], y = value / 100)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")                  overlayBounds(ov, plot, xlim = c(input$date_range), ylim = c(0, NA))     }) # Create interventions         tx_int <- list()         vax <- NULL # Apply overlays as interventions         for (i in which(ov$active)) {             begin <- ov$cx0[i] - as.numeric(input$date_range[1])             end <- ov$cx1[i] - as.numeric(input$date_range[1])             if (ov$label[i] == \"Vaccination\") {                 nu <- 0.01 # proportion of population vaccinated per day                 if (is.null(vax)) {                     vax <- vaccination(name = as.character(i), nu = matrix(nu),                         time_begin = matrix(begin), time_end = matrix(end))                 } else {                     ov$active[i] <- FALSE                 }             } else if (ov$label[i] == \"Transmission\") {                 reduc <- 0.5 # reduction in transmission                 tx_int[[length(tx_int) + 1]] <- intervention(name = as.character(i),                     type = \"rate\", time_begin = matrix(begin), time_end = matrix(end),                     reduction = reduc)             }         } # Put interventions in the right format         int <- list()         if (length(tx_int)) {             int[[\"transmission_rate\"]] <- do.call(c, tx_int)         }                  # Run model         results <- run_model(input,             vaccination = vax,             intervention = if (length(int)) int else NULL)"},{"path":"https://nicholasdavies.github.io/overshiny/articles/epidemics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Tutorial: Overlays for interventions in epidemic modelling","text":"come end tutorial. haven’t explored everything shiny overshiny can , gone basics. nice modify app two things: Compare mitigated epidemic counterfactual, unmitigated epidemic without interventions. Allow us customize vaccination rate strength transmission interventions, instead leaving 0.1% 50% respectively. following code snippet shows accomplish things. Use shiny overshiny package documentation insight changes made. Good luck!","code":"library(epidemics) library(shiny) library(overshiny) library(ggplot2)  # --- User interface --- ui <- fluidPage(     titlePanel(\"SEIRV model with interventions\"),      # Main plot with support for overlays     overlayPlotOutput(\"plot\", width = \"100%\", height = 400),      # 3 columns of inputs     fluidRow(         column(4,             # Basic epidemic settings             h3(\"Epidemic\"),             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             numericInput(\"pop_size\", \"Population size (millions)\", value = 59, min = 1),             sliderInput(\"init_infec\", \"Initial proportion infectious (%)\", value = 0.1, min = 0, max = 1, step = 0.01)         ),          column(4,             # Pathogen settings             h3(\"Pathogen\"),             sliderInput(\"R0\", HTML(\"Basic reproduction number, <i>R<\/i><sub>0<\/sub>\"),                 value = 1.3, min = 0, max = 5, step = 0.05),             sliderInput(\"latent_pd\", \"Latent period (days)\", value = 2, min = 1, max = 7, step = 0.1),             sliderInput(\"infec_pd\", \"Infectious period (days)\", value = 7, min = 1, max = 10, step = 0.1)         ),          column(4,             # Overlay controls: tokens that can be dragged onto the plot             h3(\"Interventions\"),             overlayToken(\"vax\", \"Vaccination\"),             overlayToken(\"txi\", \"Transmission\")         )     ) )  # --- App logic --- server <- function(input, output) {     # --- OVERLAY SETUP ---      # Initialise 8 draggable/resizable overlays     ov <- overlayServer(\"plot\", 8, width = 56, # 56 days = 8 weeks default width         data = list(vac_rate = 10, int_strength = 20), snap = snap_grid())      # --- OVERLAY DROPDOWN MENU ---      # Render dropdown menu when an overlay is being edited     output$plot_menu <- renderUI({         i <- req(ov$editing)  # Current overlay being edited         fmt <- function(t) format(as.Date(t, origin = \"1970-01-01\"), \"%b %d\")          dropdown <- list(             div(paste(fmt(ov$cx0[i]), \"–\", fmt(ov$cx1[i]))),             selectInput(\"plot_label\", NULL, choices = c(\"Vaccination\", \"Transmission\"), selected = ov$label[i])         )          if (ov$label[i] == \"Vaccination\") {             dropdown[[3]] <- numericInput(\"plot_vac_rate\", \"Vaccines per day (thousands)\",                 value = ov$data$vac_rate[i], min = 0, max = 10000)         } else if (ov$label[i] == \"Transmission\") {             dropdown[[3]] <- sliderInput(\"plot_int_strength\", \"Transmission reduction (%)\",                 value = ov$data$int_strength[i], min = 0, max = 100)         }          return (dropdown)     })      # --- EPIDEMIC MODEL RUNS BASED ON OVERLAY POSITIONS ---      # Model run function     run_model <- function(...)     {         # Transform parameters         I0 <- input$init_infec / 100;         duration <- as.numeric(input$date_range[2] - input$date_range[1])         infec_rate <- 1 / input$latent_pd         recov_rate <- 1 / input$infec_pd         trans_rate <- input$R0 * recov_rate          # Build population         pop <- population(             name = \"Utopia\",             contact_matrix = matrix(1),             demography_vector = input$pop_size * 1000000,             initial_conditions = matrix(c(1 - I0, 0, I0, 0, 0), nrow = 1)         )          # Run model (with additional parameters from ...)         results <- model_default(pop, transmission_rate = trans_rate,             infectiousness_rate = infec_rate, recovery_rate = recov_rate,             time_end = duration, ...)          # Transform results -- construct date and only return infection prevalence         results$date <- results$time + input$date_range[1]         results <- results[results$compartment == \"infectious\", ]         return (results)     }      # Unmitigated epidemic     epi_unmitigated <- reactive({         run_model()     })      # Mitigated epidemic     epi_mitigated <- reactive({         # Create interventions         tx_int <- list()         vax <- NULL         for (i in which(ov$active)) {             begin <- ov$cx0[i] - as.numeric(input$date_range[1])             end <- ov$cx1[i] - as.numeric(input$date_range[1])             if (ov$label[i] == \"Vaccination\") {                 nu <- ov$data$vac_rate[i] * 1000 / (input$pop_size * 1000000)                 if (is.null(vax)) {                     vax <- vaccination(name = as.character(i), nu = matrix(nu),                         time_begin = matrix(begin), time_end = matrix(end))                 } else {                     ov$active[i] <- FALSE                 }             } else if (ov$label[i] == \"Transmission\") {                 reduc <- ov$data$int_strength[i] / 100                 tx_int[[length(tx_int) + 1]] <- intervention(name = as.character(i),                     type = \"rate\", time_begin = matrix(begin), time_end = matrix(end),                     reduction = reduc)             }         }          # Get mitigated model results         int <- list()         if (length(tx_int)) {             int[[\"transmission_rate\"]] <- do.call(c, tx_int)         }         run_model(vaccination = vax,             intervention = if (length(int)) int else NULL)     })      # --- RENDERING OF EPI CURVES ---      # Render plot and align overlays to current axis limits     output$plot <- renderPlot({         plot <- ggplot() +             geom_line(data = epi_unmitigated(),                 aes(x = date, y = value/1000), alpha = 0.5) +             geom_line(data = epi_mitigated(),                 aes(x = date, y = value/1000)) +             labs(x = NULL, y = \"Infection prevalence (thousands)\")          overlayBounds(ov, plot, xlim = c(input$date_range), ylim = c(0, NA))     }) }  # --- Run app --- shinyApp(ui, server)"},{"path":"https://nicholasdavies.github.io/overshiny/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nick Davies. Author, maintainer, copyright holder.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davies N (2025). overshiny: Interactive Overlays 'shiny' Plots. R package version 0.1.1.9000, https://github.com/nicholasdavies/overshiny.","code":"@Manual{,   title = {overshiny: Interactive Overlays on 'shiny' Plots},   author = {Nick Davies},   year = {2025},   note = {R package version 0.1.1.9000},   url = {https://github.com/nicholasdavies/overshiny}, }"},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"overshiny-interactive-overlays-on-shiny-plots","dir":"","previous_headings":"","what":"Interactive Overlays on shiny Plots","title":"Interactive Overlays on shiny Plots","text":"overshiny provides draggable resizable rectangular elements overlay plots Shiny apps. may useful applications users need define regions plot input processing. Currently, overlays designed move along x axis plot.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Interactive Overlays on shiny Plots","text":"overshiny active development. missing features. Missing features: Doesn’t handle window resizing plot resizing well. simple functionality add new overlay (without using draggable overlay token)","code":""},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interactive Overlays on shiny Plots","text":"can install released version overshiny CRAN: , install development version overshiny GitHub:","code":"install.packages(\"overshiny\") # install.packages(\"devtools\") devtools::install_github(\"nicholasdavies/overshiny\")"},{"path":"https://nicholasdavies.github.io/overshiny/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Interactive Overlays on shiny Plots","text":"example shows basic functionality overshiny:","code":"library(shiny) library(ggplot2) library(overshiny)  # --- User interface --- ui <- fluidPage(     titlePanel(\"Overlay demo\"),      sidebarLayout(         sidebarPanel(             # Control whether overlays are displayed and whether they alter the plot             checkboxInput(\"show_overlays\", \"Show overlays\", value = TRUE),             checkboxInput(\"enable_logic\", \"Enable overlay logic\", value = TRUE),             tags$hr(),              # Select date range for the plot             dateRangeInput(\"date_range\", \"Date range\", start = \"2025-01-01\", end = \"2025-12-31\"),             tags$hr(),              # Overlay controls: tokens that can be dragged onto the plot             h5(\"Drag tokens below onto the plot:\"),             overlayToken(\"grow\", \"Grow\"),             overlayToken(\"shrink\", \"Shrink\")         ),          mainPanel(             # Main plot with support for overlays             overlayPlotOutput(\"plot\", width = \"100%\", height = 300)         )     ) )  # --- App logic --- server <- function(input, output, session) {     # --- OVERLAY SETUP ---      # Initialise 8 draggable/resizable overlays     ov <- overlayServer(\"plot\", 8, width = 56, # 56 days = 8 weeks default width         data = list(strength = 50), snap = snap_grid())      # Toggle overlay visibility based on checkbox     observe({         ov$show <- isTRUE(input$show_overlays)     })      # --- OVERLAY DROPDOWN MENU ---      # Render dropdown menu when an overlay is being edited     output$plot_menu <- renderUI({         i <- req(ov$editing)  # Current overlay being edited         fmt <- function(t) format(as.Date(t, origin = \"1970-01-01\"), \"%b %d\")          list(             div(paste(fmt(ov$cx0[i]), \"–\", fmt(ov$cx1[i]))),             selectInput(\"plot_label\", NULL, choices = c(\"Grow\", \"Shrink\"), selected = ov$label[i]),             sliderInput(\"plot_strength\", \"Strength\", min = 0, max = 100, value = ov$data$strength[i]),             dateInput(\"plot_cx\", \"Start date\", value = ov$cx0[i]),             sliderInput(\"plot_cw\", \"Duration\", min = 1, max = floor(ov$bound_cw), value = ov$cx1[i] - ov$cx0[i])         )     })      # --- DATA PROCESSING BASED ON OVERLAY POSITION ---      # Reactive dataset: oscillating signal modified by active overlays     data <- reactive({         date_seq <- seq(input$date_range[1], input$date_range[2], by = \"1 day\")         y <- 1 + 0.5 * sin(as.numeric(date_seq) / 58)  # oscillating signal          # Modify signal according to active overlays if logic is enabled         if (isTRUE(input$enable_logic)) {             for (i in which(ov$active)) {                 start <- as.Date(ov$cx0[i], origin = \"1970-01-01\")                 end <- as.Date(ov$cx1[i], origin = \"1970-01-01\")                 in_range <- date_seq >= start & date_seq <= end                 factor <- ov$data$strength[i] / 100                 y[in_range] <- y[in_range] * if (ov$label[i] == \"Grow\") (1 + factor) else (1 - factor)             }         }          data.frame(date = date_seq, y = y)     })      # --- RENDERING OF DATA ---      # Render plot and align overlays to current axis limits     output$plot <- renderPlot({         plot <- ggplot(data()) +             geom_line(aes(x = date, y = y)) +             ylim(0, 3) +             labs(x = NULL, y = \"Signal\")          overlayBounds(ov, plot, xlim = c(input$date_range), ylim = c(0, NA))     }) }  # --- Run app --- shinyApp(ui, server)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Align overlays with a ggplot2 or base plot — overlayBounds","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"Sets pixel coordinate bounds overlay area based ggplot2::ggplot() object base R plot. ensures overlays positioned correctly visual coordinate space.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"","code":"overlayBounds(ov, plot, xlim = c(NA, NA), ylim = c(NA, NA), row = 1L, col = 1L)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"ov shiny::reactiveValues() object returned overlayServer(). plot ggplot2::ggplot() object used overlay alignment, character string \"base\" using base R plotting. xlim, ylim Vectors defining coordinate limits overlays. Use NA inherit axis limits plot panel. row, col Row column facet panel (applicable). works ggplot2 plots; base R plots multiple panels supported.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"ggplot object (ggplot2) NULL (base R plotting), returned shiny::renderPlot() block.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"Call function within shiny::renderPlot(), returning ggplot object (using ggplot2) NULL (using base R plotting).","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align overlays with a ggplot2 or base plot — overlayBounds","text":"","code":"server <- function(input, output) {     ov <- overlayServer(\"my_plot\", 1, 1)     output$my_plot <- shiny::renderPlot({         plot(1:100, sin(1:100 * 0.1), type = \"l\")         overlayBounds(ov, \"base\", xlim = c(1, 100))     })     # further server code here . . . }"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plot output element with overlays — overlayPlotOutput","title":"Create a plot output element with overlays — overlayPlotOutput","text":"Render shiny::renderPlot() within application page, support overlays.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plot output element with overlays — overlayPlotOutput","text":"","code":"overlayPlotOutput(outputId, width, height)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plot output element with overlays — overlayPlotOutput","text":"outputId output slot plot rendered using shiny::renderPlot(), call overlayBounds(). width, height Image width height. Must valid CSS unit, like \"100%\", \"400px\", \"auto\", number, interpreted pixels.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plot output element with overlays — overlayPlotOutput","text":"plot output element can added UI definition.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayPlotOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plot output element with overlays — overlayPlotOutput","text":"","code":"ui <- shiny::fluidPage(     overlayPlotOutput(\"my_plot\", 640, 480)     # further UI elements here . . . )"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add interactive overlays to a Shiny plot — overlayServer","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"function sets server-side infrastructure support draggable resizable overlays plot. may useful applications users need define regions plot input processing. Currently, overlays designed move along x axis plot.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"","code":"overlayServer(   outputId,   nrect,   width = NULL,   data = NULL,   snap = \"none\",   colours = overlayColours,   opacity = 0.25,   icon = shiny::icon(\"gear\"),   stagger = 0.045,   style = list(),   debug = FALSE )"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"outputId ID plot output (used overlayPlotOutput()). nrect Number overlay rectangles support. width Optional default overlay width plot coordinates. NULL (default), set 10% plot width. data Named list custom overlay-specific properties edited overlay dropdown menu. snap Function \"snap\" overlay coordinates grid, \"none\" (default) snapping. See details specify snap function; can also use built-snap_grid(). colours function assign custom colours overlays. function takes single integer (number overlays) returns colours hexadecimal notation (e.g. \"#FF0000\"). provide opacity fourth channel; use opacity argument instead. opacity Numeric value (0 1) indicating overlay transparency. icon Shiny icon show dropdown menu. stagger Vertical offset stacked overlays, proportion height. style Named list character vectors additional CSS styling attributes overlays. element named \"background-color\" override colours opacity arguments. Vectors recycled length nrect. debug TRUE, prints changes input values console debugging purposes.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"shiny::reactiveValues() object following named fields: Note: Fields marked \"read-\" changed. fields can changed reactive code modify overlays properties. fields px pw specify pixel coordinates overlay can modified, modifications placed shiny::isolate() call, call ov$update_cx() end update cx0 cx1 apply snapping. Similarly, fields cx0 cx1 specify plot coordinates overlay can modified, modifications placed shiny::isolate() call call ov$update_px() end update px pw apply snapping. parameter functions can left apply changes overlays, can pass indices just overlay(s) updated.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"Call function server code initialise set overlay rectangles specific plot. creates reactive handlers move, resize, dropdown menu actions, allows adding new overlays dragging overlayToken() onto plot. function returns shiny::reactiveValues() object keep use; examples documentation, object typically called ov. function also defines dynamic output UI slot ID paste0(outputId, \"_menu\"), can rendered using shiny::renderUI(). user clicks overlay's dropdown icon, menu becomes visible can populated inputs editing overlay-specific settings, e.g. labels numeric parameters tied overlay. expression call shiny::renderUI() return (list ) Shiny input/output widgets. give input widgets special IDs, user can use input widgets directly modify certain properties overlays (see examples): provide coordinate snapping function (snap argument), signature function(ov, ) ov shiny::reactiveValues() object defining overlays settings, set indices rectangles updated. position overlays changed, snapping function applied. function, make sure ov$cx0[] ov$cx1[] within coordinate bounds defined plot, .e. constrained ov$bound_cx ov$bound_cw, function returns. means, example, \"rounding \" ov$cx0[] nearest multiple number, make sure become less ov$bound_cx. Finally, snapping function get triggered x axis range plot changes, may good idea provide one user might place overlay onto plot, change x axis range plot overlay longer visible. can detect verifying whether overlay rectangles \"bounds\" top snapping function. See code snap_grid() ideas.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add interactive overlays to a Shiny plot — overlayServer","text":"","code":"ui <- shiny::fluidPage(     overlayPlotOutput(\"my_plot\", 640, 480),     overlayToken(\"add\", \"Raise\")     # further UI elements here . . . )  server <- function(input, output) {     ov <- overlayServer(\"my_plot\", 4, 1, snap = snap_grid())      output$my_plot_menu <- renderUI({         i <- req(ov$editing)         textInput(\"my_plot_label\", \"Overlay label\", value = ov$label[i])     })      output$my_plot <- shiny::renderPlot({         df <- data.frame(x = seq(0, 2 * pi, length.out = 200))         mat <- function(x, byrow = FALSE) matrix(x, nrow = ov$n, ncol = length(df$x), byrow = byrow)         overlap <- mat(df$x, byrow = TRUE) >= mat(ov$cx0) &             mat(df$x, byrow = TRUE) <= mat(ov$cx1)         df$y <- sin(df$x) + 0.1 * colSums(ov$active * overlap)         plot(df, type = \"l\")         overlayBounds(ov, \"base\")     })     # further server code here . . . }  if (interactive()) {     shiny::shinyApp(ui, server) }"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an overlay token input control — overlayToken","title":"Create an overlay token input control — overlayToken","text":"Create token can dragged onto overlay plot create new overlay.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an overlay token input control — overlayToken","text":"","code":"overlayToken(id, name, label = name)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an overlay token input control — overlayToken","text":"id unique ID token (character string without spaces). name Text (HTML) displayed token . label Text label appear overlay.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an overlay token input control — overlayToken","text":"overlay token input control can added UI definition.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an overlay token input control — overlayToken","text":"Note DOM ID token converted \"overshiny_token_<id>\". transformed ID important internal interaction logic (e.g. use JavaScript drag/drop handlers). referencing token programmatically (e.g. CSS selectors custom JavaScript), use full prefixed ID (see examples).","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overlayToken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an overlay token input control — overlayToken","text":"","code":"ui <- shiny::fluidPage(     useOverlay(),     overlayToken(\"add\", \"Add new overlay\", \"Overlay\"),     # The token's HTML id will be \"overshiny_token_add\"     shiny::tags$style(shiny::HTML(\"#overshiny_token_add { cursor: grab; }\")) )"},{"path":"https://nicholasdavies.github.io/overshiny/reference/overshiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive overlays on Shiny plots — overshiny","title":"Interactive overlays on Shiny plots — overshiny","text":"overshiny provides draggable resizable rectangular elements overlay plots Shiny apps. may useful applications users need define regions plot input processing. Currently, overlays designed move along x axis plot.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/overshiny.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interactive overlays on Shiny plots — overshiny","text":"package exports setup helper (useOverlay()), UI components (overlayToken(), overlayPlotOutput()), server-side controller (overlayServer()), function aligning overlays ggplot2 base plot (overlayBounds()).","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/overshiny.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interactive overlays on Shiny plots — overshiny","text":"Maintainer: Nick Davies nicholas.davies@lshtm.ac.uk [copyright holder]","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/remargin.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust margins of a ggplot2 plot — remargin","title":"Adjust margins of a ggplot2 plot — remargin","text":"avoid overlay rectangles moving around plot margins change, can use function set specific margins plot. probably want specify large enough margin axes legends go plot area.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/remargin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust margins of a ggplot2 plot — remargin","text":"","code":"remargin(g, t, r, b, l, unit = \"npc\")"},{"path":"https://nicholasdavies.github.io/overshiny/reference/remargin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust margins of a ggplot2 plot — remargin","text":"g ggplot2 plot. t, r, b, l Top, right, bottom, left margins set. unit Unit margins (see grid::unit() permissible units). default, \"npc\", refers fractions overall plot area.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/remargin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust margins of a ggplot2 plot — remargin","text":"ggplot2 plot margins adjusted.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/remargin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust margins of a ggplot2 plot — remargin","text":"Note works ggplot2 plots. base plots, can set margins using par(plt = c(x1, x2, y1, y2)). See graphics::par() details.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/remargin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust margins of a ggplot2 plot — remargin","text":"","code":"plot1 = ggplot2::ggplot(data.frame(x = rnorm(10), y = rnorm(10))) +     ggplot2::geom_point(ggplot2::aes(x, y)) plot2 = remargin(plot1, 0.1, 0.1, 0.1, 0.1) # plot with 10% margins all around"},{"path":"https://nicholasdavies.github.io/overshiny/reference/snap_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Snap overlays to a grid — snap_grid","title":"Snap overlays to a grid — snap_grid","text":"Use function snap parameter overlayServer() enable simple snap--grid behaviour overlay. ensure overlays stay within bounds plot, snap position width overlay specified grid.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/snap_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Snap overlays to a grid — snap_grid","text":"","code":"snap_grid(anchor = 0, step = 1, min_width = NA, max_width = NA)"},{"path":"https://nicholasdavies.github.io/overshiny/reference/snap_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Snap overlays to a grid — snap_grid","text":"anchor location specific gridline. step space gridlines. min_width (optional) Minimum width overlay; default (NA) sets step. Use NULL minimum. max_width (optional) Maximum width overlay; default (NA) sets largest size accommodates width overlay bounds, accounting grid. Use NULL maximum. Note default values snap overlays whole numbers.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/snap_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Snap overlays to a grid — snap_grid","text":"snapping function suitable pass overlayServer() snap argument.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/snap_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Snap overlays to a grid — snap_grid","text":"","code":"server <- function(input, output) {     ov <- overlayServer(\"my_plot\", 8, snap = snap_grid())     # further server code here . . . }"},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually set up a Shiny app to use overshiny — useOverlay","title":"Manually set up a Shiny app to use overshiny — useOverlay","text":"overshiny set automatically overlayPlotOutput() anywhere Shiny UI, probably using package. , can set overshiny manually putting useOverlay() somewhere Shiny app's UI.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually set up a Shiny app to use overshiny — useOverlay","text":"","code":"useOverlay()"},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually set up a Shiny app to use overshiny — useOverlay","text":"Returns HTML dependency sets Shiny app use overshiny.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manually set up a Shiny app to use overshiny — useOverlay","text":"also calls shinyjs::useShinyjs(), overshiny depends shinyjs.","code":""},{"path":[]},{"path":"https://nicholasdavies.github.io/overshiny/reference/useOverlay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually set up a Shiny app to use overshiny — useOverlay","text":"","code":"ui <- shiny::fluidPage(     useOverlay() # only needed if no overlayPlotOutput() elements below     # further UI elements here . . . )  server <- function(input, output) {     # server code here . . . }  if (interactive()) {     shiny::shinyApp(ui, server) }"},{"path":"https://nicholasdavies.github.io/overshiny/news/index.html","id":"overshiny-development-version","dir":"Changelog","previous_headings":"","what":"overshiny (development version)","title":"overshiny (development version)","text":"Simplified use overlay dropdown menus. Added new vignette infectious disease modelling overlays.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/news/index.html","id":"overshiny-011","dir":"Changelog","previous_headings":"","what":"overshiny 0.1.1","title":"overshiny 0.1.1","text":"CRAN release: 2025-08-28 useOverlay() now called automatically use overlayPlotOutput(). Added remargin() function adjusting ggplot2 plot margins. Expanded introductory vignette.","code":""},{"path":"https://nicholasdavies.github.io/overshiny/news/index.html","id":"overshiny-010","dir":"Changelog","previous_headings":"","what":"overshiny 0.1.0","title":"overshiny 0.1.0","text":"CRAN release: 2025-07-22 Initial CRAN submission.","code":""}]
